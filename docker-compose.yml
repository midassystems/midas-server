services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    profiles:
      - dev
      - prod 
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${SCRIPTS_DIR}/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - app-network
    restart: always

  migrate-database:
    build:
      context: .
      dockerfile: ./database/Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      HISTORICAL_DATABASE_URL: ${HISTORICAL_DATABASE_URL}
      TRADING_DATABASE_URL: ${TRADING_DATABASE_URL}
    profiles:
      - dev
      - prod
    depends_on:
      - postgres  # Ensure PostgreSQL is ready first
    command: >
      sh -c "/app/scripts/migrate-db.sh historical && 
             /app/scripts/migrate-db.sh trading
            "
    networks:
      - app-network

  # Historical service
  historical-service: 
    build:
      context: .
      dockerfile: "./historical/Dockerfile"
    environment:
      HISTORICAL_DATABASE_URL: ${HISTORICAL_DATABASE_URL} 
      HISTORICAL_PORT: ${HISTORICAL_PORT}
      LOG_FILE: /app/logs/historical.log
      LOG_LEVEL: info
    profiles:
      - dev
      - prod  
    depends_on:
      - migrate-database
    ports:
      - "${HISTORICAL_PORT}:${HISTORICAL_PORT}"  
    volumes:
      - data:/app/data
      - logs:/app/logs
      - scripts:/app/scripts
    command: ["./midas-historical"]
    networks:
      - app-network 
    restart: always

  # Trading service
  trading-service: 
    build:
      context: .
      dockerfile: "./trading/Dockerfile"
    environment:
      TRADING_DATABASE_URL: ${TRADING_DATABASE_URL}
      TRADING_PORT: ${TRADING_PORT}
      LOG_FILE: /app/logs/trading.log
      LOG_LEVEL: info
    profiles:
      - dev
      - prod  
    depends_on:
      - migrate-database
    ports:
      - "${TRADING_PORT}:${TRADING_PORT}"  
    volumes:
      - data:/app/data
      - logs:/app/logs
      - scripts:/app/scripts
    command: ["./midas-trading"]
    networks:
      - app-network
    restart: always


  # Instrument service
  instrument-service: 
    build:
      context: .
      dockerfile: "./instrument/Dockerfile"
    environment:
      INSTRUMENT_DATABASE_URL: ${INSTRUMENT_DATABASE_URL}
      INSTRUMENT_PORT: ${INSTRUMENT_PORT}
      LOG_FILE: /app/logs/instrument.log
      LOG_LEVEL: info
    profiles:
      - dev
      - prod  
    depends_on:
      - migrate-database
    ports:
      - "${INSTRUMENT_PORT}:${INSTRUMENT_PORT}"  
    volumes:
      - data:/app/data
      - logs:/app/logs
      - scripts:/app/scripts
    command: ["./midas-instrument"]
    networks:
      - app-network
    restart: always

networks:
  app-network:
    driver: bridge

volumes:
  logs:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${LOG_DIR} 
  data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${DATA_DIR}  
  scripts:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${SCRIPTS_DIR}
  postgres_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${POSTGRES_DIR}/data  




