services:
  manager:
    build:
      context: .
      dockerfile: "./cli/Dockerfile"
    environment:
      MIDAS_URL: http://api:8080
      LOG_FILE: /app/logs/manager.log
    env_file:
      - .env  # Reference the local .env file
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    networks:
      - app-network

 # Single PostgreSQL service hosting both databases
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Application service for market data
  database:
    build:
      context: .  # Include the entire project as context
      dockerfile: ./database/Dockerfile
    environment:
      POSTGRES_USER: postgres        # Add this
      POSTGRES_PASSWORD: password    # Add this
      MARKET_DATABASE_URL: postgres://postgres:password@postgres:5432/market_data
      TRADING_DATABASE_URL: postgres://postgres:password@postgres:5432/trading_data
      LOG_FILE: /app/logs/database.log
    depends_on:
      - postgres  # Wait for the database to be ready
    volumes:
      - ./logs:/app/logs
    command: ./scripts/init-db.sh
    networks:
      - app-network

  api: 
    build:
      context: .
      dockerfile: "./api/Dockerfile"
    environment:
      MARKET_DATABASE_URL: postgres://postgres:password@postgres:5432/market_data
      TRADING_DATABASE_URL: postgres://postgres:password@postgres:5432/trading_data
      API_LOG_FILE: /app/logs/api.log
    depends_on:
      - postgres
    ports:
      - "8080:8080"  # Expose the app port to the host
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    command: ["./midas-api"]
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:




