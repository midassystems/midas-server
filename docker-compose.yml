services:
  host_setup:
    profiles:
      - production
    volumes:
      - scripts:/scripts  # Just bind the scripts volume
    command: ["./scripts/host-setup.sh"]  # Run your setup script from the volume
    
  # Single PostgreSQL service hosting both databases
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    profiles:
      - dev
      - database
      - testing
      - production  # API should run in both dev and production
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${SCRIPTS_DIR}/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - app-network

  historical-database:
    build:
      context: .
      dockerfile: ./database/historical/Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      HISTORICAL_DATABASE_URL: ${HISTORICAL_DATABASE_URL}
    depends_on:
      - postgres  # Wait for the database to be ready
    command: ["/app/scripts/migrate-db.sh", "historical"]
    networks:
      - app-network

  # Actual api service
  historical-service: 
    build:
      context: .
      dockerfile: "./services/historical/Dockerfile"
    environment:
      HISTORICAL_DATABASE_URL: ${HISTORICAL_DATABASE_URL} 
      HISTORICAL_PORT: ${HISTORICAL_PORT}
      LOG_FILE: /app/logs/historical.log
      LOG_LEVEL: info
    profiles:
      - dev
      - testing
      - database
      - production  # API should run in both dev and production
    depends_on:
      - historical-database
    ports:
      - "${HISTORICAL_PORT}:${HISTORICAL_PORT}"  
    volumes:
      - data:/app/data
      - logs:/app/logs
      - scripts:/app/scripts
    command: ["./midas-historical"]
    networks:
      - app-network 

  trading-database:
    build:
      context: .
      dockerfile: ./database/trading/Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TRADING_DATABASE_URL: ${TRADING_DATABASE_URL}
    depends_on:
      - postgres  # Wait for the database to be ready
    command: ["/app/scripts/migrate-db.sh", "trading"]
    networks:
      - app-network


  # Actual api service
  trading-service: 
    build:
      context: .
      dockerfile: "./services/trading/Dockerfile"
    environment:
      TRADING_DATABASE_URL: ${TRADING_DATABASE_URL}
      TRADING_PORT: ${TRADING_PORT}
      LOG_FILE: /app/logs/trading.log
      LOG_LEVEL: info
    profiles:
      - dev
      - testing
      - database
      - production  # API should run in both dev and production
    depends_on:
      - trading-database
    ports:
      - "${TRADING_PORT}:${TRADING_PORT}"  
    volumes:
      - data:/app/data
      - logs:/app/logs
      - scripts:/app/scripts
    command: ["./midas-trading"]
    networks:
      - app-network


  # Admin for updating etc 
  manager:
    build:
      context: .
      dockerfile: "./cli/Dockerfile"
    environment:
      MIDAS_URL: http://historical-service:${HISTORICAL_PORT}
    profiles:
      - testing
      - production  
    volumes:
      - data:/app/data
      - ${BIN_DIR}:/usr/local/bin  # Mount host's bin directory
      - ${LIB_DIR}:/usr/local/lib  # Mount host's lib directory
    command: ["./app/scripts/build-manager.sh"]
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  logs:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${LOG_DIR}  # Centralized log directory
  data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${DATA_DIR}  # Centralized data directory
  scripts:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${SCRIPTS_DIR}
  postgres_data:





